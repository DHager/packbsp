/**
 * Copyright (C) 2011 Darien Hager
 *
 * This code is part of the "PackBSP" project, and is licensed under
 * a Creative Commons Attribution-ShareAlike 3.0 Unported License. For
 * either a summary of conditions or the full legal text, please visit:
 *
 * http://creativecommons.org/licenses/by-sa/3.0/
 *
 * Permissions beyond the scope of this license may be available
 * at http://technofovea.com/ .
 */
/*
 * 
 */

/*
 * PackDialog.java
 *
 * Created on Jun 6, 2010, 12:31:03 AM
 */
package com.technofovea.packbsp.gui2;

import java.io.File;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import org.jdesktop.application.Action;

/**
 *
 * @author Darien Hager
 */
public class PackDialog extends javax.swing.JDialog {
    
    File defaultDir;
    PackingTableModel model;

    public PackDialog() {
        this(null);
    }



    /** Creates new form PackDialog */
    public PackDialog(java.awt.Frame parent) {

        super(parent, true);
        
        initComponents();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(PackDialog.class);
        ImageIcon mainIco = resourceMap.getImageIcon("Application.icon");
        if(mainIco != null){
            setIconImage(mainIco.getImage());
        }
        reset();
    }

    public void reset() {
        relativeField.setText("");
        this.absolutePicker.setSelectedFile(defaultDir);
        this.absolutePicker.setCurrentDirectory(defaultDir);
    }

    public File getDefaultDir() {
        return defaultDir;
    }

    public void setDefaultDir(File defaultDir) {
        this.defaultDir = defaultDir;
        this.absolutePicker.setCurrentDirectory(defaultDir);
    }

    public PackingTableModel getModel() {
        return model;
    }

    public void setModel(PackingTableModel model) {
        this.model = model;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        relativeField = new javax.swing.JTextField();
        absolutePicker = new com.technofovea.packbsp.gui2.FilePicker();
        relativeLabel = new javax.swing.JLabel();
        absoluteLabel = new javax.swing.JLabel();
        acceptButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(PackDialog.class);
        setTitle(resourceMap.getString("title")); // NOI18N

        relativeField.setName("relativeField"); // NOI18N
        relativeField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                syncToAbs(evt);
            }
        });

        absolutePicker.setName("absolutePicker"); // NOI18N
        absolutePicker.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                syncToRel(evt);
            }
        });

        relativeLabel.setText(resourceMap.getString("relativeLabel.text")); // NOI18N
        relativeLabel.setName("relativeLabel"); // NOI18N

        absoluteLabel.setText("File Source"); // NOI18N
        absoluteLabel.setName("absoluteLabel"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance().getContext().getActionMap(PackDialog.class, this);
        acceptButton.setAction(actionMap.get("acceptPair")); // NOI18N
        acceptButton.setIcon(resourceMap.getIcon("acceptButton.icon")); // NOI18N
        acceptButton.setText(resourceMap.getString("acceptButton.text")); // NOI18N
        acceptButton.setName("acceptButton"); // NOI18N

        cancelButton.setAction(actionMap.get("cancelDialog")); // NOI18N
        cancelButton.setIcon(resourceMap.getIcon("cancelButton.icon")); // NOI18N
        cancelButton.setText(resourceMap.getString("cancelButton.text")); // NOI18N
        cancelButton.setName("cancelButton"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(relativeLabel)
                    .addComponent(relativeField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 507, Short.MAX_VALUE)
                    .addComponent(absoluteLabel)
                    .addComponent(absolutePicker, javax.swing.GroupLayout.DEFAULT_SIZE, 507, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(cancelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 347, Short.MAX_VALUE)
                        .addComponent(acceptButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(relativeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(relativeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(absoluteLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(absolutePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(acceptButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private boolean isAbsBlank() {
        File f = absolutePicker.getSelectedFile();
        if (f == null) {
            return true;
        }
        if (f.equals(defaultDir)) {
            return true;
        }
        if (!f.exists()) {
            return true;
        }
        if (f.isDirectory()) {
            return true;
        }
        return false;
    }

    private boolean isRelBlank() {
        String txt = relativeField.getText();
        if (txt == null) {
            return true;
        }
        txt = txt.trim();
        return txt.equals("");
    }

    private String absToRel(File f) {
        StringBuilder path = new StringBuilder();
        boolean found = false;
        File target = f;
        while (target != null) {
            if (target.equals(defaultDir)) {
                found = true;
                break;
            }
            path.insert(0, "/" + target.getName());
            target = target.getParentFile();
        }
        if (found) {
            // Recombine path bits into relative path
            path.deleteCharAt(0); // Leading slash
            return path.toString();
        } else {
            return null;
        }
    }

    private void syncToAbs(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_syncToAbs
        if (isRelBlank()) {
            return;
        }
        if (isAbsBlank()) {
            File absTarget = new File(defaultDir, relativeField.getText());
            absolutePicker.setSelectedFile(absTarget);

        }
    }//GEN-LAST:event_syncToAbs

    private void syncToRel(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_syncToRel
        if (isAbsBlank()) {
            return;
        }
        if (isRelBlank()) {
            File selected = absolutePicker.getSelectedFile();
            String relPath = absToRel(selected);
            if (relPath != null) {
                relativeField.setText(relPath);
            } else {
                relativeField.setText(selected.getName());
            }
        }
    }//GEN-LAST:event_syncToRel


    private void showWarning(String title, String text) {

        JOptionPane.showMessageDialog(this,
                text,
                title,
                JOptionPane.WARNING_MESSAGE);

    }

    @Action
    public void cancelDialog() {
        this.setVisible(false);
        this.reset();

    }

    @Action
    public void acceptPair() {
        if (isRelBlank()) {
            showWarning("Invalid input", "The relative field seems to be blank.");
            return;
        }
        if (isAbsBlank()) {
            //TODO fix misperception of 'blank' when it includes defaultdir
            showWarning("Invalid input", "The data source field seems to be blank.");
            return;
        }
        if (!absolutePicker.getSelectedFile().isFile()) {
            showWarning("Invalid input", "The data source is not a valid file.");
            return;
        }

        //TODO check extension isn't changing, confirm w/ user if it is

        // Save into model and exit
        model.addItem(relativeField.getText(), absolutePicker.getSelectedFile());

        // Don't fully reset, but...
        relativeField.setText("");
        File parentDir = this.absolutePicker.getSelectedFile().getParentFile();
        this.absolutePicker.setCurrentDirectory(parentDir);

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel absoluteLabel;
    private com.technofovea.packbsp.gui2.FilePicker absolutePicker;
    private javax.swing.JButton acceptButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField relativeField;
    private javax.swing.JLabel relativeLabel;
    // End of variables declaration//GEN-END:variables
}
