/**
 * Copyright (C) 2011 Darien Hager
 *
 * This code is part of the "PackBSP" project, and is licensed under
 * a Creative Commons Attribution-ShareAlike 3.0 Unported License. For
 * either a summary of conditions or the full legal text, please visit:
 *
 * http://creativecommons.org/licenses/by-sa/3.0/
 *
 * Permissions beyond the scope of this license may be available
 * at http://technofovea.com/ .
 */
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * LogFrame.java
 *
 * Created on Mar 7, 2010, 5:47:20 PM
 */
package com.technofovea.packbsp.gui2.logging;

import com.technofovea.packbsp.gui2.logging.LoggingTable.ListAppender;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

import java.io.File;
import javax.swing.JFrame;
import javax.swing.table.TableColumn;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.jdesktop.application.Action;

/**
 *
 * @author Darien Hager
 */
public class LogFrame extends javax.swing.JFrame {

    LoggingTable backer;
    Level normalLevel;
    Level highLevel = Level.DEBUG;
    final File logLocation;
    final Logger rootLogger;

    /** Creates new form LogFrame */
    public LogFrame(final LoggingTable backer) {

        this.backer = backer;
        rootLogger = Logger.getRootLogger();
        normalLevel = backer.getThreshold();

        initComponents();


        //TODO enable level save/restore and checkbox behavior
        rootLogger.addAppender(backer.getAppender());

        FileAppender appender = (FileAppender) rootLogger.getAppender("LOGFILE");
        logLocation = new File(appender.getFile());
        logPathField.setText(logLocation.getAbsolutePath());

        // When the model recieves an error event we want to know so that we can pop up

        final LogFrame self = this;
        backer.addPropertyChangeListener(new PropertyChangeListener() {

            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName().equals(backer.PROP_LAST_ERROR)) {
                    if (evt.getNewValue() != null) {
                        self.setVisible(true);
                    }
                }
            }
        });
        //TODO do we need to worry about removing out listener later?
    }

    public File getLogLocation() {
        return logLocation;
    }

    @Override
    protected void finalize() throws Throwable {
        Logger.getRootLogger().removeAppender(backer.getAppender());
    }

    public LoggingTable getBacker() {
        return backer;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        debugCheckbox = new javax.swing.JCheckBox();
        clearButton = new javax.swing.JButton();
        logLocationLabel = new javax.swing.JLabel();
        logPathField = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        logScroller = new javax.swing.JScrollPane();
        logTable = new javax.swing.JTable();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(LogFrame.class);
        setTitle(resourceMap.getString("title")); // NOI18N
        setIconImage(resourceMap.getImageIcon("Application.icon").getImage());

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance().getContext().getActionMap(LogFrame.class, this);
        debugCheckbox.setAction(actionMap.get("alterLogLevel")); // NOI18N
        debugCheckbox.setText(resourceMap.getString("debugCheckbox.text")); // NOI18N
        debugCheckbox.setToolTipText(resourceMap.getString("debugCheckbox.toolTipText")); // NOI18N
        debugCheckbox.setName("debugCheckbox"); // NOI18N
        debugCheckbox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                debugCheckboxItemStateChanged(evt);
            }
        });

        clearButton.setText("Clear Buffer"); // NOI18N
        clearButton.setName("clearButton"); // NOI18N
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        logLocationLabel.setText(resourceMap.getString("logLocationLabel.text")); // NOI18N
        logLocationLabel.setName("logLocationLabel"); // NOI18N

        logPathField.setEditable(false);
        logPathField.setName("logPathField"); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Showing last "+backer.getMaxEntries()+" entries"));
        jPanel1.setName("jPanel1"); // NOI18N

        logScroller.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        logScroller.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        logScroller.setAutoscrolls(true);
        logScroller.setName("logScroller"); // NOI18N

        TableColumn timeCol = new TableColumn(LoggingTable.COL_TIME);
        timeCol.setPreferredWidth(120);
        timeCol.setMaxWidth(120);
        timeCol.setHeaderValue("Time");
        logTable.addColumn(timeCol);

        TableColumn levelCol = new TableColumn(LoggingTable.COL_LEVEL);
        levelCol.setPreferredWidth(50);
        levelCol.setMaxWidth(50);
        levelCol.setCellRenderer(new LogCellRenderer());
        levelCol.setHeaderValue("Level");
        logTable.addColumn(levelCol);

        TableColumn messageCol = new TableColumn(LoggingTable.COL_MESSAGE);
        messageCol.setHeaderValue("Message");
        logTable.addColumn(messageCol);
        logTable.setAutoCreateColumnsFromModel(false);
        logTable.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        logTable.setModel(getBacker());
        logTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        logTable.setName("logTable"); // NOI18N
        final JFrame logFrame = this;
        logTable.getModel().addTableModelListener(new EndScrollListener(logTable, logFrame));
        logScroller.setViewportView(logTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(logScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 482, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(logScroller, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(debugCheckbox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 282, Short.MAX_VALUE)
                        .addComponent(clearButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(logLocationLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(logPathField, javax.swing.GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(debugCheckbox)
                    .addComponent(clearButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(logLocationLabel)
                    .addComponent(logPathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        backer.clear();
    }//GEN-LAST:event_clearButtonActionPerformed

    private void debugCheckboxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_debugCheckboxItemStateChanged
        // TODO change log level
    }//GEN-LAST:event_debugCheckboxItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws InterruptedException {
        final LoggingTable model = new LoggingTable();
        final ListAppender appender = model.getAppender();
        final Logger log = Logger.getLogger(LogFrame.class.toString());
        org.apache.log4j.LogManager.getRootLogger().addAppender(appender);

        log.info("This is a test");
        System.out.println(model.getRowCount());
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new LogFrame(model).setVisible(true);
            }
        });

        for (int i = 0; i < 20; i++) {
            log.error("This is fake error #" + i);
            Thread.sleep(1000);
        }
    }

    @Override
    public void setVisible(boolean b) {
        super.setVisible(b);
        if (b) {
            this.toFront();
        }
    }

    @Action
    public void alterLogLevel() {
        if (debugCheckbox.isSelected()) {

            backer.setThreshold(highLevel);
        } else {
            backer.setThreshold(normalLevel);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearButton;
    private javax.swing.JCheckBox debugCheckbox;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel logLocationLabel;
    private javax.swing.JTextField logPathField;
    private javax.swing.JScrollPane logScroller;
    private javax.swing.JTable logTable;
    // End of variables declaration//GEN-END:variables
}
