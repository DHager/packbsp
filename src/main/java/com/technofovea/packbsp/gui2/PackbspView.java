/**
 * Copyright (C) 2011 Darien Hager
 *
 * This code is part of the "PackBSP" project, and is licensed under
 * a Creative Commons Attribution-ShareAlike 3.0 Unported License. For
 * either a summary of conditions or the full legal text, please visit:
 *
 * http://creativecommons.org/licenses/by-sa/3.0/
 *
 * Permissions beyond the scope of this license may be available
 * at http://technofovea.com/ .
 */
package com.technofovea.packbsp.gui2;

import com.technofovea.packbsp.gui2.logging.LoggingTable;
import com.technofovea.packbsp.gui2.logging.LogFrame;
import com.technofovea.packbsp.AppModel;
import com.technofovea.packbsp.PackbspException;
import com.technofovea.packbsp.devkits.Game;
import java.awt.CardLayout;
import java.awt.event.ItemEvent;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultListModel;
import javax.swing.JComponent;
import javax.swing.event.DocumentEvent;
import org.jdesktop.application.Action;
import org.jdesktop.application.FrameView;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.TableColumn;
import javax.swing.tree.TreePath;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.Task;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * The application's main frame.
 */
public class PackbspView extends FrameView {

    private Logger log = LoggerFactory.getLogger(PackbspView.class);
    protected final WindowListener closeListener;
    protected final PackbspApplication app;
    protected CrawlStatusModel crawlModel = new CrawlStatusModel();
    protected PackingTableModel packingModel = new PackingTableModel();
    protected DocumentListener packingContentListener = new DocumentListener() {

        public void insertUpdate(DocumentEvent e) {
            packingCustomized = true;
        }

        public void removeUpdate(DocumentEvent e) {
            packingCustomized = true;
        }

        public void changedUpdate(DocumentEvent e) {
            packingCustomized = true;
        }
    };
    protected File packingFile = null;
    protected boolean packingCustomized = false;

    public PackbspView(PackbspApplication parentApp) {
        super(parentApp);
        app = parentApp;
        initComponents();
        // Wire things up so that the little "X" close button works through our
        // app-level code, so that people are prompted etc.
        closeListener = new BasicWindowListener() {

            @Override
            public void windowClosing(WindowEvent e) {
                app.exit(e);
            }
        };
        getFrame().setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        getFrame().addWindowListener(closeListener);




        JFrame mainFrame = app.getMainFrame();

        aboutBox = new PackbspAboutBox(mainFrame);
        aboutBox.setLocationRelativeTo(mainFrame);

        /*
        progressBox = new ProgressDialog(mainFrame, app.getStatus());
        progressBox.setLocationRelativeTo(mainFrame);
         */
        logBox = new LogFrame(new LoggingTable());





    }

    public CrawlStatusModel getCrawlModel() {
        return crawlModel;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        mainPanel = new javax.swing.JPanel();
        step1panel = new javax.swing.JPanel();
        step1next = new javax.swing.JButton();
        steamDirLabel = new javax.swing.JLabel();
        steamDirPicker = new com.technofovea.packbsp.gui2.FilePicker();
        step2panel = new javax.swing.JPanel();
        step2prev = new javax.swing.JButton();
        step2next = new javax.swing.JButton();
        gameTreeScroller = new javax.swing.JScrollPane();
        gameTree = new javax.swing.JTree();
        gameDetailScroll = new javax.swing.JScrollPane();
        gameDetailTable = new javax.swing.JTable();
        step3panel = new javax.swing.JPanel();
        sourceFilePicker = new com.technofovea.packbsp.gui2.FilePicker();
        sourceFileLabel = new javax.swing.JLabel();
        step3prev = new javax.swing.JButton();
        step3next = new javax.swing.JButton();
        step4panel = new javax.swing.JPanel();
        crawlNumbersPanel = new javax.swing.JPanel();
        crawlMissingLabel = new javax.swing.JLabel();
        crawlMissingText = new javax.swing.JTextField();
        crawlSkippedLabel = new javax.swing.JLabel();
        crawlSkippedText = new javax.swing.JTextField();
        crawlPackedLabel = new javax.swing.JLabel();
        crawlPackedText = new javax.swing.JTextField();
        errorListPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        errorList = new javax.swing.JList();
        currentNodeText = new javax.swing.JTextField();
        currentNodeLabel = new javax.swing.JLabel();
        step4run = new javax.swing.JButton();
        step4next = new javax.swing.JButton();
        step4prev = new javax.swing.JButton();
        step5panel = new javax.swing.JPanel();
        step5prev = new javax.swing.JButton();
        step5next = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        packingTable = new javax.swing.JTable();
        removePackButton = new javax.swing.JButton();
        addPackButton = new javax.swing.JButton();
        step6panel = new javax.swing.JPanel();
        destFileLabel = new javax.swing.JLabel();
        destFilePicker = new com.technofovea.packbsp.gui2.FilePicker();
        step6prev = new javax.swing.JButton();
        step6next = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        packingContentText = new javax.swing.JTextArea();
        enableCustomPackCheckbox = new javax.swing.JCheckBox();
        step7panel = new javax.swing.JPanel();
        congratsLabel = new javax.swing.JLabel();
        congratsReminder = new javax.swing.JTextField();
        step7prev = new javax.swing.JButton();
        step7restart = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        logMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        packInvalidDialog = new javax.swing.JDialog();
        jScrollPane4 = new javax.swing.JScrollPane();
        packErrorList = new javax.swing.JList();
        invalidPackDismissButton = new javax.swing.JButton();
        invalidPackLabel = new javax.swing.JLabel();
        newPackDialog = new com.technofovea.packbsp.gui2.PackDialog();

        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.setLayout(new java.awt.CardLayout());

        step1panel.setName("step1panel"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance().getContext().getActionMap(PackbspView.class, this);
        step1next.setAction(actionMap.get("advanceStep1")); // NOI18N
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(PackbspView.class);
        step1next.setIcon(resourceMap.getIcon("icons.next")); // NOI18N
        step1next.setText(resourceMap.getString("buttons.next")); // NOI18N
        step1next.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        step1next.setName("step1next"); // NOI18N

        steamDirLabel.setText(resourceMap.getString("steamDirLabel.text")); // NOI18N
        steamDirLabel.setName("steamDirLabel"); // NOI18N

        steamDirPicker.setDialogTitle(resourceMap.getString("steamDirPicker.dialogTitle")); // NOI18N
        steamDirPicker.setDialogType(FilePicker.OPEN_DIALOG);
        steamDirPicker.setFileSelectionMode(FilePicker.DIRECTORIES_ONLY);
        steamDirPicker.setName("steamDirPicker"); // NOI18N
        steamDirPicker.setSelectedFile(new File("c:/program files/valve/steam/"));

        org.jdesktop.layout.GroupLayout step1panelLayout = new org.jdesktop.layout.GroupLayout(step1panel);
        step1panel.setLayout(step1panelLayout);
        step1panelLayout.setHorizontalGroup(
            step1panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(step1panelLayout.createSequentialGroup()
                .addContainerGap()
                .add(step1panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(step1panelLayout.createSequentialGroup()
                        .add(steamDirLabel)
                        .add(10, 10, 10)
                        .add(steamDirPicker, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE)
                        .add(91, 91, 91))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, step1panelLayout.createSequentialGroup()
                        .add(step1next)
                        .addContainerGap())))
        );
        step1panelLayout.setVerticalGroup(
            step1panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(step1panelLayout.createSequentialGroup()
                .addContainerGap()
                .add(step1panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, steamDirLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, steamDirPicker, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 221, Short.MAX_VALUE)
                .add(step1next)
                .addContainerGap())
        );

        mainPanel.add(step1panel, "step1");

        step2panel.setName("step2panel"); // NOI18N

        step2prev.setAction(actionMap.get("retreatStep2")); // NOI18N
        step2prev.setIcon(resourceMap.getIcon("icons.prev")); // NOI18N
        step2prev.setText(resourceMap.getString("buttons.prev")); // NOI18N
        step2prev.setName("step2prev"); // NOI18N

        step2next.setAction(actionMap.get("advanceStep2")); // NOI18N
        step2next.setIcon(resourceMap.getIcon("icons.next")); // NOI18N
        step2next.setText(resourceMap.getString("buttons.next")); // NOI18N
        step2next.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        step2next.setName("step2next"); // NOI18N

        gameTreeScroller.setName("gameTreeScroller"); // NOI18N

        gameTree.setModel(new GameTreeModel());
        gameTree.setName("gameTree"); // NOI18N
        gameTreeScroller.setViewportView(gameTree);

        gameDetailScroll.setName("gameDetailScroll"); // NOI18N

        gameDetailTable.setEnabled(false);
        gameDetailTable.setName("gameDetailTable"); // NOI18N
        gameDetailScroll.setViewportView(gameDetailTable);

        org.jdesktop.layout.GroupLayout step2panelLayout = new org.jdesktop.layout.GroupLayout(step2panel);
        step2panel.setLayout(step2panelLayout);
        step2panelLayout.setHorizontalGroup(
            step2panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(step2panelLayout.createSequentialGroup()
                .addContainerGap()
                .add(step2panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(step2panelLayout.createSequentialGroup()
                        .add(gameTreeScroller, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 240, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(gameDetailScroll, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE))
                    .add(step2panelLayout.createSequentialGroup()
                        .add(step2prev)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 388, Short.MAX_VALUE)
                        .add(step2next)))
                .addContainerGap())
        );
        step2panelLayout.setVerticalGroup(
            step2panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(step2panelLayout.createSequentialGroup()
                .addContainerGap()
                .add(step2panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(gameTreeScroller, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
                    .add(gameDetailScroll, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(step2panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(step2prev)
                    .add(step2next))
                .addContainerGap())
        );

        mainPanel.add(step2panel, "step2");

        step3panel.setName("step3panel"); // NOI18N

        ArrayList<FileFilter> fileFilters = new ArrayList<FileFilter>();
        fileFilters.add(new FileNameExtensionFilter("Map files", "bsp"));
        sourceFilePicker.setFilters(fileFilters);
        sourceFilePicker.setDialogTitle(resourceMap.getString("sourceFilePicker.dialogTitle")); // NOI18N
        sourceFilePicker.setDialogType(FilePicker.OPEN_DIALOG);
        sourceFilePicker.setFileSelectionMode(FilePicker.FILES_ONLY);
        sourceFilePicker.setName("sourceFilePicker"); // NOI18N

        sourceFileLabel.setText(resourceMap.getString("sourceFileLabel.text")); // NOI18N
        sourceFileLabel.setName("sourceFileLabel"); // NOI18N

        step3prev.setAction(actionMap.get("retreatStep3")); // NOI18N
        step3prev.setIcon(resourceMap.getIcon("icons.prev")); // NOI18N
        step3prev.setText(resourceMap.getString("step3prev.text")); // NOI18N
        step3prev.setName("step3prev"); // NOI18N

        step3next.setAction(actionMap.get("advanceStep3")); // NOI18N
        step3next.setIcon(resourceMap.getIcon("icons.next")); // NOI18N
        step3next.setText(resourceMap.getString("step3next.text")); // NOI18N
        step3next.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        step3next.setName("step3next"); // NOI18N

        org.jdesktop.layout.GroupLayout step3panelLayout = new org.jdesktop.layout.GroupLayout(step3panel);
        step3panel.setLayout(step3panelLayout);
        step3panelLayout.setHorizontalGroup(
            step3panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(step3panelLayout.createSequentialGroup()
                .addContainerGap()
                .add(step3panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(step3panelLayout.createSequentialGroup()
                        .add(sourceFileLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(sourceFilePicker, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 486, Short.MAX_VALUE))
                    .add(step3panelLayout.createSequentialGroup()
                        .add(step3prev)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 388, Short.MAX_VALUE)
                        .add(step3next)))
                .addContainerGap())
        );
        step3panelLayout.setVerticalGroup(
            step3panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(step3panelLayout.createSequentialGroup()
                .addContainerGap()
                .add(step3panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(sourceFileLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(sourceFilePicker, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 221, Short.MAX_VALUE)
                .add(step3panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(step3prev)
                    .add(step3next))
                .addContainerGap())
        );

        mainPanel.add(step3panel, "step3");

        step4panel.setName("step4panel"); // NOI18N

        crawlNumbersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("crawlNumbersPanel.border.title"))); // NOI18N
        crawlNumbersPanel.setName("crawlNumbersPanel"); // NOI18N

        crawlMissingLabel.setText(resourceMap.getString("crawlMissingLabel.text")); // NOI18N
        crawlMissingLabel.setName("crawlMissingLabel"); // NOI18N
        crawlNumbersPanel.add(crawlMissingLabel);

        crawlMissingText.setEditable(false);
        crawlMissingText.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        crawlMissingText.setMinimumSize(new java.awt.Dimension(40, 20));
        crawlMissingText.setName("crawlMissingText"); // NOI18N
        crawlMissingText.setPreferredSize(new java.awt.Dimension(60, 20));

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${crawlModel.missingCount}"), crawlMissingText, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        crawlNumbersPanel.add(crawlMissingText);

        crawlSkippedLabel.setText(resourceMap.getString("crawlSkippedLabel.text")); // NOI18N
        crawlSkippedLabel.setName("crawlSkippedLabel"); // NOI18N
        crawlNumbersPanel.add(crawlSkippedLabel);

        crawlSkippedText.setEditable(false);
        crawlSkippedText.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        crawlSkippedText.setMinimumSize(new java.awt.Dimension(40, 20));
        crawlSkippedText.setName("crawlSkippedText"); // NOI18N
        crawlSkippedText.setPreferredSize(new java.awt.Dimension(60, 20));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${crawlModel.skippedCount}"), crawlSkippedText, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        crawlNumbersPanel.add(crawlSkippedText);

        crawlPackedLabel.setText(resourceMap.getString("crawlPackedLabel.text")); // NOI18N
        crawlPackedLabel.setName("crawlPackedLabel"); // NOI18N
        crawlNumbersPanel.add(crawlPackedLabel);

        crawlPackedText.setEditable(false);
        crawlPackedText.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        crawlPackedText.setMinimumSize(new java.awt.Dimension(40, 20));
        crawlPackedText.setName("crawlPackedText"); // NOI18N
        crawlPackedText.setPreferredSize(new java.awt.Dimension(60, 20));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${crawlModel.foundCount}"), crawlPackedText, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        crawlNumbersPanel.add(crawlPackedText);

        errorListPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("errorListPanel.border.title"))); // NOI18N
        errorListPanel.setName("errorListPanel"); // NOI18N

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setName("jScrollPane1"); // NOI18N

        errorList.setModel(crawlModel.getErrorList());
        errorList.setName("errorList"); // NOI18N
        jScrollPane1.setViewportView(errorList);

        org.jdesktop.layout.GroupLayout errorListPanelLayout = new org.jdesktop.layout.GroupLayout(errorListPanel);
        errorListPanel.setLayout(errorListPanelLayout);
        errorListPanelLayout.setHorizontalGroup(
            errorListPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE)
        );
        errorListPanelLayout.setVerticalGroup(
            errorListPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
        );

        currentNodeText.setEditable(false);
        currentNodeText.setName("currentNodeText"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${crawlModel.currentNodeText}"), currentNodeText, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        currentNodeLabel.setText(resourceMap.getString("currentNodeLabel.text")); // NOI18N
        currentNodeLabel.setName("currentNodeLabel"); // NOI18N

        step4run.setAction(actionMap.get("step4run")); // NOI18N
        step4run.setIcon(resourceMap.getIcon("icons.rundeps")); // NOI18N
        step4run.setText(resourceMap.getString("step4run.text")); // NOI18N
        step4run.setName("step4run"); // NOI18N

        step4next.setAction(actionMap.get("advanceStep4")); // NOI18N
        step4next.setIcon(resourceMap.getIcon("icons.next")); // NOI18N
        step4next.setText(resourceMap.getString("step4next.text")); // NOI18N
        step4next.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        step4next.setName("step4next"); // NOI18N

        step4prev.setAction(actionMap.get("retreatStep4")); // NOI18N
        step4prev.setIcon(resourceMap.getIcon("icons.prev")); // NOI18N
        step4prev.setText(resourceMap.getString("step4prev.text")); // NOI18N
        step4prev.setName("step4prev"); // NOI18N

        org.jdesktop.layout.GroupLayout step4panelLayout = new org.jdesktop.layout.GroupLayout(step4panel);
        step4panel.setLayout(step4panelLayout);
        step4panelLayout.setHorizontalGroup(
            step4panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, step4panelLayout.createSequentialGroup()
                .addContainerGap()
                .add(step4panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, step4panelLayout.createSequentialGroup()
                        .add(step4prev)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 235, Short.MAX_VALUE)
                        .add(step4run)
                        .add(10, 10, 10)
                        .add(step4next))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, crawlNumbersPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, step4panelLayout.createSequentialGroup()
                        .add(currentNodeLabel)
                        .add(38, 38, 38)
                        .add(currentNodeText, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE))
                    .add(errorListPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        step4panelLayout.setVerticalGroup(
            step4panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(step4panelLayout.createSequentialGroup()
                .addContainerGap()
                .add(step4panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(currentNodeLabel)
                    .add(currentNodeText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(errorListPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(crawlNumbersPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(step4panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(step4prev)
                    .add(step4run)
                    .add(step4next))
                .addContainerGap())
        );

        mainPanel.add(step4panel, "step4");

        step5panel.setName("step5panel"); // NOI18N

        step5prev.setAction(actionMap.get("retreatStep5")); // NOI18N
        step5prev.setIcon(resourceMap.getIcon("icons.prev")); // NOI18N
        step5prev.setText(resourceMap.getString("step5prev.text")); // NOI18N
        step5prev.setName("step5prev"); // NOI18N

        step5next.setAction(actionMap.get("advanceStep5")); // NOI18N
        step5next.setIcon(resourceMap.getIcon("icons.next")); // NOI18N
        step5next.setText(resourceMap.getString("step5next.text")); // NOI18N
        step5next.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        step5next.setName("step5next"); // NOI18N

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jScrollPane2.border.title"))); // NOI18N
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setName("jScrollPane2"); // NOI18N

        TableColumn relCol = new TableColumn(PackingTableModel.Column.PATH.ordinal());
        relCol.setHeaderValue("Path");
        packingTable.addColumn(relCol);

        TableColumn absCol = new TableColumn(PackingTableModel.Column.SOURCE.ordinal());
        absCol.setHeaderValue("Data Source");
        absCol.setCellRenderer(new AbsSourceRenderer());
        absCol.setCellEditor(new AbsSourceEditor());
        packingTable.addColumn(absCol);
        packingTable.setAutoCreateColumnsFromModel(false);
        packingTable.setAutoCreateRowSorter(true);
        packingTable.setModel(packingModel);
        packingTable.setName("packingTable"); // NOI18N
        jScrollPane2.setViewportView(packingTable);

        removePackButton.setAction(actionMap.get("removePackItems")); // NOI18N
        removePackButton.setIcon(resourceMap.getIcon("icons.pack.remove")); // NOI18N
        removePackButton.setText(resourceMap.getString("removePackButton.text")); // NOI18N
        removePackButton.setName("removePackButton"); // NOI18N

        addPackButton.setAction(actionMap.get("addPackItems")); // NOI18N
        addPackButton.setIcon(resourceMap.getIcon("icons.pack.add")); // NOI18N
        addPackButton.setText(resourceMap.getString("addPackButton.text")); // NOI18N
        addPackButton.setName("addPackButton"); // NOI18N

        org.jdesktop.layout.GroupLayout step5panelLayout = new org.jdesktop.layout.GroupLayout(step5panel);
        step5panel.setLayout(step5panelLayout);
        step5panelLayout.setHorizontalGroup(
            step5panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, step5panelLayout.createSequentialGroup()
                .addContainerGap()
                .add(step5panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
                    .add(step5panelLayout.createSequentialGroup()
                        .add(step5prev)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 46, Short.MAX_VALUE)
                        .add(addPackButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(removePackButton)
                        .add(90, 90, 90)
                        .add(step5next)))
                .addContainerGap())
        );
        step5panelLayout.setVerticalGroup(
            step5panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, step5panelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(step5panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(step5prev)
                    .add(step5next)
                    .add(removePackButton)
                    .add(addPackButton))
                .addContainerGap())
        );

        mainPanel.add(step5panel, "step5");

        step6panel.setName("step6panel"); // NOI18N

        destFileLabel.setText(resourceMap.getString("destFileLabel.text")); // NOI18N
        destFileLabel.setName("destFileLabel"); // NOI18N

        destFilePicker.setDialogTitle(resourceMap.getString("destFilePicker.dialogTitle")); // NOI18N
        destFilePicker.setDialogType(FilePicker.SAVE_DIALOG);
        destFilePicker.setName("destFilePicker"); // NOI18N

        step6prev.setAction(actionMap.get("retreatStep6")); // NOI18N
        step6prev.setIcon(resourceMap.getIcon("icons.prev")); // NOI18N
        step6prev.setText(resourceMap.getString("step6prev.text")); // NOI18N
        step6prev.setName("step6prev"); // NOI18N

        step6next.setAction(actionMap.get("advanceStep6")); // NOI18N
        step6next.setIcon(resourceMap.getIcon("icons.next")); // NOI18N
        step6next.setText(resourceMap.getString("step6next.text")); // NOI18N
        step6next.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        step6next.setName("step6next"); // NOI18N

        jScrollPane5.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jScrollPane5.border.title"))); // NOI18N
        jScrollPane5.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane5.setName("jScrollPane5"); // NOI18N

        packingContentText.setColumns(20);
        packingContentText.setEditable(false);
        packingContentText.setRows(5);
        packingContentText.setEnabled(false);
        packingContentText.setName("packingContentText"); // NOI18N
        packingContentText.getDocument().addDocumentListener(packingContentListener);
        jScrollPane5.setViewportView(packingContentText);

        enableCustomPackCheckbox.setText(resourceMap.getString("enableCustomPackCheckbox.text")); // NOI18N
        enableCustomPackCheckbox.setName("enableCustomPackCheckbox"); // NOI18N
        enableCustomPackCheckbox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                enableCustomPackCheckboxItemStateChanged(evt);
            }
        });

        org.jdesktop.layout.GroupLayout step6panelLayout = new org.jdesktop.layout.GroupLayout(step6panel);
        step6panel.setLayout(step6panelLayout);
        step6panelLayout.setHorizontalGroup(
            step6panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, step6panelLayout.createSequentialGroup()
                .addContainerGap()
                .add(step6panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, step6panelLayout.createSequentialGroup()
                        .add(destFileLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(destFilePicker, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, step6panelLayout.createSequentialGroup()
                        .add(step6prev)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 388, Short.MAX_VALUE)
                        .add(step6next))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, enableCustomPackCheckbox))
                .addContainerGap())
        );
        step6panelLayout.setVerticalGroup(
            step6panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(step6panelLayout.createSequentialGroup()
                .addContainerGap()
                .add(step6panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, destFileLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, destFilePicker, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(enableCustomPackCheckbox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(step6panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(step6prev)
                    .add(step6next))
                .addContainerGap())
        );

        mainPanel.add(step6panel, "step6");

        step7panel.setName("step7panel"); // NOI18N

        congratsLabel.setText(resourceMap.getString("congratsLabel.text")); // NOI18N
        congratsLabel.setName("congratsLabel"); // NOI18N

        congratsReminder.setEditable(false);
        congratsReminder.setText(resourceMap.getString("congratsReminder.text")); // NOI18N
        congratsReminder.setName("congratsReminder"); // NOI18N

        step7prev.setAction(actionMap.get("retreatStep7")); // NOI18N
        step7prev.setIcon(resourceMap.getIcon("icons.prev")); // NOI18N
        step7prev.setText(resourceMap.getString("step7prev.text")); // NOI18N
        step7prev.setName("step7prev"); // NOI18N

        step7restart.setAction(actionMap.get("startOver")); // NOI18N
        step7restart.setIcon(resourceMap.getIcon("icons.restart")); // NOI18N
        step7restart.setText(resourceMap.getString("step7restart.text")); // NOI18N
        step7restart.setName("step7restart"); // NOI18N

        org.jdesktop.layout.GroupLayout step7panelLayout = new org.jdesktop.layout.GroupLayout(step7panel);
        step7panel.setLayout(step7panelLayout);
        step7panelLayout.setHorizontalGroup(
            step7panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(step7panelLayout.createSequentialGroup()
                .addContainerGap()
                .add(step7panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(congratsReminder, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
                    .add(congratsLabel)
                    .add(step7panelLayout.createSequentialGroup()
                        .add(step7prev)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(step7restart)))
                .addContainerGap())
        );
        step7panelLayout.setVerticalGroup(
            step7panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(step7panelLayout.createSequentialGroup()
                .addContainerGap()
                .add(congratsLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(congratsReminder, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 202, Short.MAX_VALUE)
                .add(step7panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(step7prev)
                    .add(step7restart))
                .addContainerGap())
        );

        mainPanel.add(step7panel, "step7");

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setMnemonic('F');
        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setIcon(resourceMap.getIcon("icons.exit")); // NOI18N
        exitMenuItem.setText(resourceMap.getString("exitMenuItem.text")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setMnemonic('H');
        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        logMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
        logMenuItem.setIcon(resourceMap.getIcon("icons.openlog")); // NOI18N
        logMenuItem.setMnemonic('L');
        logMenuItem.setText(resourceMap.getString("logMenuItem.text")); // NOI18N
        logMenuItem.setName("logMenuItem"); // NOI18N
        logMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(logMenuItem);

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setIcon(resourceMap.getIcon("icons.about")); // NOI18N
        aboutMenuItem.setText(resourceMap.getString("aboutMenuItem.text")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        packInvalidDialog.setTitle(resourceMap.getString("packInvalidDialog.title")); // NOI18N
        packInvalidDialog.setIconImage(resourceMap.getImageIcon("Application.icon").getImage());
        packInvalidDialog.setMinimumSize(new java.awt.Dimension(380, 200));
        packInvalidDialog.setModal(true);
        packInvalidDialog.setName("packInvalidDialog"); // NOI18N

        jScrollPane4.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jScrollPane4.border.title"))); // NOI18N
        jScrollPane4.setName("jScrollPane4"); // NOI18N

        packErrorList.setModel(new DefaultListModel());
        packErrorList.setName("packErrorList"); // NOI18N
        jScrollPane4.setViewportView(packErrorList);

        invalidPackDismissButton.setAction(actionMap.get("dismissPackErrors")); // NOI18N
        invalidPackDismissButton.setText(resourceMap.getString("invalidPackDismissButton.text")); // NOI18N
        invalidPackDismissButton.setName("invalidPackDismissButton"); // NOI18N

        invalidPackLabel.setText(resourceMap.getString("invalidPackLabel.text")); // NOI18N
        invalidPackLabel.setName("invalidPackLabel"); // NOI18N

        org.jdesktop.layout.GroupLayout packInvalidDialogLayout = new org.jdesktop.layout.GroupLayout(packInvalidDialog.getContentPane());
        packInvalidDialog.getContentPane().setLayout(packInvalidDialogLayout);
        packInvalidDialogLayout.setHorizontalGroup(
            packInvalidDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(packInvalidDialogLayout.createSequentialGroup()
                .addContainerGap()
                .add(packInvalidDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(invalidPackLabel)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, invalidPackDismissButton)
                    .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE))
                .addContainerGap())
        );
        packInvalidDialogLayout.setVerticalGroup(
            packInvalidDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(packInvalidDialogLayout.createSequentialGroup()
                .addContainerGap()
                .add(invalidPackLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(invalidPackDismissButton)
                .addContainerGap())
        );

        newPackDialog.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        newPackDialog.setModel(packingModel);
        newPackDialog.setName("newPackDialog"); // NOI18N

        setComponent(mainPanel);
        setMenuBar(menuBar);

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        PackbspApplication.getApplication().show(aboutBox);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void logMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logMenuItemActionPerformed
        PackbspApplication.getApplication().show(logBox);
    }//GEN-LAST:event_logMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        getApplication().exit();
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void enableCustomPackCheckboxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_enableCustomPackCheckboxItemStateChanged
        switch (evt.getStateChange()) {
            case ItemEvent.SELECTED:
                packingContentText.setEditable(true);
                packingContentText.setEnabled(true);
                break;
            case ItemEvent.DESELECTED:
                packingContentText.setEditable(false);
                packingContentText.setEnabled(false);

                // In case they enabled, edited, and then disabled again, undo changes
                if (packingCustomized) {
                    try {
                        reloadCustomPackingBox();
                        packingCustomized = false;

                    } catch (IOException ex) {
                        log.error("Could not reload custom packing box", ex);
                    }
                }
                break;
        }
    }//GEN-LAST:event_enableCustomPackCheckboxItemStateChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addPackButton;
    private javax.swing.JLabel congratsLabel;
    private javax.swing.JTextField congratsReminder;
    private javax.swing.JLabel crawlMissingLabel;
    private javax.swing.JTextField crawlMissingText;
    private javax.swing.JPanel crawlNumbersPanel;
    private javax.swing.JLabel crawlPackedLabel;
    private javax.swing.JTextField crawlPackedText;
    private javax.swing.JLabel crawlSkippedLabel;
    private javax.swing.JTextField crawlSkippedText;
    private javax.swing.JLabel currentNodeLabel;
    private javax.swing.JTextField currentNodeText;
    private javax.swing.JLabel destFileLabel;
    private com.technofovea.packbsp.gui2.FilePicker destFilePicker;
    private javax.swing.JCheckBox enableCustomPackCheckbox;
    private javax.swing.JList errorList;
    private javax.swing.JPanel errorListPanel;
    private javax.swing.JScrollPane gameDetailScroll;
    private javax.swing.JTable gameDetailTable;
    private javax.swing.JTree gameTree;
    private javax.swing.JScrollPane gameTreeScroller;
    private javax.swing.JButton invalidPackDismissButton;
    private javax.swing.JLabel invalidPackLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JMenuItem logMenuItem;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private com.technofovea.packbsp.gui2.PackDialog newPackDialog;
    private javax.swing.JList packErrorList;
    private javax.swing.JDialog packInvalidDialog;
    private javax.swing.JTextArea packingContentText;
    private javax.swing.JTable packingTable;
    private javax.swing.JButton removePackButton;
    private javax.swing.JLabel sourceFileLabel;
    private com.technofovea.packbsp.gui2.FilePicker sourceFilePicker;
    private javax.swing.JLabel steamDirLabel;
    private com.technofovea.packbsp.gui2.FilePicker steamDirPicker;
    private javax.swing.JButton step1next;
    private javax.swing.JPanel step1panel;
    private javax.swing.JButton step2next;
    private javax.swing.JPanel step2panel;
    private javax.swing.JButton step2prev;
    private javax.swing.JButton step3next;
    private javax.swing.JPanel step3panel;
    private javax.swing.JButton step3prev;
    private javax.swing.JButton step4next;
    private javax.swing.JPanel step4panel;
    private javax.swing.JButton step4prev;
    private javax.swing.JButton step4run;
    private javax.swing.JButton step5next;
    private javax.swing.JPanel step5panel;
    private javax.swing.JButton step5prev;
    private javax.swing.JButton step6next;
    private javax.swing.JPanel step6panel;
    private javax.swing.JButton step6prev;
    private javax.swing.JPanel step7panel;
    private javax.swing.JButton step7prev;
    private javax.swing.JButton step7restart;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
    private JDialog aboutBox;
    //private ProgressDialog progressBox;
    private LogFrame logBox;

    void showBetaMessage() {
        ResourceMap rmap = app.getContext().getResourceMap(getClass());
        String version = rmap.getString("Application.version");

        String logLocation = logBox.getLogLocation().getAbsolutePath();

        JOptionPane.showMessageDialog(this.getFrame(),
                "This application is a test-version: " + version + "\n"
                + "See the Help->About screen for the URL to "
                + "download newer versions.\n\n"
                + "When reporting an error, please provide the log file at:\n"
                + "    " + logLocation,
                "Beta Software",
                JOptionPane.INFORMATION_MESSAGE);
    }

    void showCancelledDialog(final String message) {

        final JComponent parent = this.getComponent();
        Runnable show = new Runnable() {

            public void run() {
                JOptionPane.showMessageDialog(parent,
                        message,
                        "Cancelled",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        };
        if (SwingUtilities.isEventDispatchThread()) {
            SwingUtilities.invokeLater(show);
        } else {
            show.run();
        }
    }

    void showInvalidInputDialog(final String message, final Throwable error) {
        log.error("Invalid input error caught by GUI", error);
        final JComponent parent = this.getComponent();
        Runnable show = new Runnable() {

            public void run() {
                JOptionPane.showMessageDialog(parent,
                        message + "\n\n" + error.getMessage(),
                        "Invalid Input",
                        JOptionPane.WARNING_MESSAGE);
            }
        };
        if (SwingUtilities.isEventDispatchThread()) {
            SwingUtilities.invokeLater(show);
        } else {
            show.run();
        }
    }

    void showErrorDialog(final String message, final Throwable error) {
        log.error("Error caught by GUI", error);
        final JComponent parent = this.getComponent();
        Runnable show = new Runnable() {

            public void run() {
                JOptionPane.showMessageDialog(parent,
                        message + "\n\n" + error.getMessage(),
                        "Internal Error",
                        JOptionPane.WARNING_MESSAGE);
            }
        };
        if (SwingUtilities.isEventDispatchThread()) {
            SwingUtilities.invokeLater(show);
        } else {
            show.run();
        }

    }

    void moveToCard(String name) {
        CardLayout cl = (CardLayout) mainPanel.getLayout();
        cl.show(mainPanel, name);
    }

    @Action(block = Task.BlockingScope.WINDOW)
    public Task advanceStep1() throws PackbspException {
        return new AbstractTask<Void, Void>(app, this) {

            @Override
            protected Void doInBackground() throws PackbspException {
                setTitle("Accessing Steam Configs");
                setMessage("Interpreting steam files: " + steamDirPicker.getSelectedFile().getAbsolutePath());
                model.acceptSteamDirectory(steamDirPicker.getSelectedFile());
                setMessage("Loading complete.");
                return null;
            }

            @Override
            protected void succeeded(Void result) {
                //TODO populate game tree
                ((GameTreeModel)gameTree.getModel()).setKits(model.getKits());
                moveToCard("step2");
            }
        };
    }

    @Action
    public void retreatStep2() {
        moveToCard("step1");
    }

    @Action(block = Task.BlockingScope.WINDOW)
    public Task advanceStep2() throws PackbspException {
        return new AbstractTask<Game, Void>(app, this) {

            @Override
            protected Game doInBackground() throws PackbspException {
                setTitle("Picking target game");
                
                TreePath path = gameTree.getSelectionPath();
                Object target = null;
                if(path != null){
                    target = path.getLastPathComponent();
                }
                Game g = null;
                if(target instanceof Game){
                    g = ((Game)target);
                }

                model.acceptGame(g);
                return g;            
            }

            @Override
            protected void succeeded(Game chosen) {
                newPackDialog.setDefaultDir(model.getGameDir());
                sourceFilePicker.setSelectedFile(model.getBspDir());
                destFilePicker.setSelectedFile(model.getBspDir());

                TableColumn col = packingTable.getColumn("Data Source"); //TODO clarify
                AbsSourceEditor rend = (AbsSourceEditor)col.getCellEditor();
                rend.setGameDir(model.getGameDir());

                moveToCard("step3");
                // This must be invoked later or we get two modal
                // dialogs each blocking each other from ending
                SwingUtilities.invokeLater(new Runnable() {

                    public void run() {
                        sourceFilePicker.showDialog();
                    }
                });
            }
        };
    }

    @Action
    public void retreatStep3() {
        moveToCard("step2");
    }

    @Action(block = Task.BlockingScope.WINDOW)
    public Task advanceStep3() throws PackbspException {
        return new AbstractTask<Void, Void>(app, this) {

            @Override
            protected Void doInBackground() throws PackbspException {
                setTitle("Setting source map");
                File sel = sourceFilePicker.getSelectedFile();
                assert (sel != null); // If it was null an exception would be thrown
                model.acceptSourceFile(sel);
                destFilePicker.setSelectedFile(sel);
                return null;
            }

            @Override
            protected void succeeded(Void result) {
                step4next.setEnabled(false);
                step4run.setEnabled(true);
                crawlModel.reset();
                moveToCard("step4");
            }
        };
    }

    @Action
    public void retreatStep4() {
        moveToCard("step3");
    }

    @Action(block = Task.BlockingScope.WINDOW)
    public Task step4run() throws PackbspException {
        return new AbstractTask<Void, Void>(app, this) {

            @Override
            protected Void doInBackground() throws PackbspException {
                setTitle("Crawling dependency graph");
                setMessage("Crawling...");
                //TODO pass in listener for showing progress
                crawlModel.reset();
                packingModel.clear();
                model.acceptCrawling(crawlModel,null); //FIXME to use graphpanel?
                return null;
            }

            @Override
            protected void succeeded(Void result) {
                packingModel.setData(model.getDependencies());
                // TODO inject into model
                step4next.setEnabled(true);
                step4run.setEnabled(false);
            }
        };
    }

    @Action
    public void advanceStep4() {
        moveToCard("step5");
    }

    @Action
    public void retreatStep5() {
        moveToCard("step4");
    }

    @Action(block = Task.BlockingScope.WINDOW)
    public Task advanceStep5() throws PackbspException {
        final Map<String, File> pairs = packingModel.getPackablePairs();

        return new AbstractTask<List<String>, Void>(app, this) {

            @Override
            protected List<String> doInBackground() throws PackbspException {
                setTitle("Converting pairs to packing-file");
                List<String> errors = PackingTableModel.validatePackablePairs(pairs);
                setMessage("Found " + pairs.size() + " packing pairs");

                // Don't forget to test if we have anything to do.
                if (pairs.size() == 0) {
                    errors.add("There are no items to pack.");
                }

                if (errors.size() != 0) {
                    // Exit early with error list
                    return errors;
                }

                try {
                    packingFile = null;
                    setMessage("Creating temporary file");
                    packingFile = File.createTempFile("packbsp_list_", ".txt");
                    packingFile.deleteOnExit();
                    setMessage("Saving to temporary file");

                    AppModel.savePackList(pairs, packingFile);
                } catch (IOException ex) {
                    throw new PackbspException("Could not save temporary packing file", ex);
                }


                return errors;
            }

            @Override
            protected void succeeded(List<String> errors) {
                if (errors.size() > 0) {
                    DefaultListModel errListModel = ((DefaultListModel) packErrorList.getModel());
                    errListModel.clear();
                    for (String s : errors) {
                        errListModel.addElement(s);
                    }
                    Runnable show = new Runnable() {

                        public void run() {
                            packInvalidDialog.setVisible(true);
                        }
                    };
                    if (SwingUtilities.isEventDispatchThread()) {
                        SwingUtilities.invokeLater(show);
                    } else {
                        show.run();
                    }
                    return;
                }

                try {
                    this.outer.reloadCustomPackingBox();
                    enableCustomPackCheckbox.setSelected(false);
                } catch (final IOException ex) {
                    showErrorDialog("Could not load packing-list for display", ex);
                    return; // Return without changing window
                }

                moveToCard("step6");
                // Invoke later just in case of any double-modal blocking
                SwingUtilities.invokeLater(new Runnable() {

                    public void run() {
                        destFilePicker.showDialog();
                    }
                });
            }
        };
    }

    @Action
    public void retreatStep6() {
        packingFile = null;
        moveToCard("step5");
    }

    @Action(block = Task.BlockingScope.WINDOW)
    public Task advanceStep6() throws PackbspException {
        if (packingCustomized && enableCustomPackCheckbox.isSelected()) {
            try {
                FileWriter fw = new FileWriter(packingFile);
                packingContentText.write(fw);
                fw.close();

            } catch (final IOException ex) {
                showErrorDialog("Could not write packing-list back out to system", ex);
                return null;
            }
        }

        return new AbstractTask<Void, Void>(app, this) {

            @Override
            protected Void doInBackground() throws PackbspException {
                setTitle("Packing new BSP");
                File target = destFilePicker.getSelectedFile();
                if (target != null) {
                    setMessage("Packing to: " + target.getName()); // Abs path too long to show
                } else {
                    setMessage("Packing to: <No location specified>");
                }

                model.acceptPacking(packingFile, target);
                return null;
            }

            @Override
            protected void succeeded(Void result) {
                assert (destFilePicker.getSelectedFile() != null);
                congratsReminder.setText(destFilePicker.getSelectedFile().getAbsolutePath());
                moveToCard("step7");
            }
        };

    }

    @Action
    public void addPackItems() {
        newPackDialog.setVisible(true);
    }

    @Action
    public void removePackItems() {
        packingModel.removeItems(packingTable.getSelectedRows());
    }

    protected void reloadCustomPackingBox() throws IOException {
        // Put file contents into editor
        FileReader fr = new FileReader(packingFile);
        packingContentText.read(fr, packingFile);
        packingCustomized = false;
    }

    @Action
    public void dismissPackErrors() {
        packInvalidDialog.setVisible(false);
    }

    @Action
    public void retreatStep7() {
        moveToCard("step6");
    }

    @Action
    public void startOver() {
        moveToCard("step3");
    }
}
