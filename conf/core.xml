<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-2.5.xsd
           http://www.springframework.org/schema/util 
           http://www.springframework.org/schema/util/spring-util-2.5.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <!--
        Note that if there are multiple PropertyPlaceholderConfigurer objects, the first property
        seen "wins".
        
        <property name="properties">
            <value>placeholder=placeholder</value>
        </property>
        -->
        <property name="locations">
            <value>core.properties</value>
        </property>
    </bean>
    
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <!--
                First load from the classpath (which generally contains non-locale defaults)
                And then load from the filesystem. (This allows people to work on I18N without
                requiring them to download the source and compile.)
                -->
                <value>classpath:errors</value>
                <value>file:conf/errors</value>
            </list>
        </property>
    </bean>
    
       

    <!-- Scopes, abstract beans, internationalization -->
    <bean id="steam-scope" class="com.technofovea.packbsp.spring.DefaultNestedScope"/>
    <bean id="game-scope" class="com.technofovea.packbsp.spring.DefaultNestedScope">
        <property name="parentScopes" ref="steam-scope"/>
    </bean>

    <bean class="org.springframework.beans.factory.config.CustomScopeConfigurer">
        <property name="scopes">
            <map>
                <entry key="steam" value-ref="steam-scope"/>      
                <entry key="game" value-ref="game-scope"/>
            </map>
        </property>
    </bean>
    
    <bean id="exceptionLocalizer" class="com.technofovea.packbsp.spring.DefaultExceptionLocalizer" depends-on="messageSource"/>        
    
    <!-- Basic tool components -->
    
    <bean id="profile-loader" class="com.technofovea.packbsp.spring.ProfileLoader">
        <property name="source" value="${packbsp.profile_location}"/>
    </bean>
    
    <bean id="steamdir-detector" class="com.technofovea.packbsp.spring.SteamDirectoryFinder">
        <property name="registryKey" value="${steam.registry_installation_key}"/>
    </bean>
    
    <bean id="registry-factory" class="com.technofovea.packbsp.spring.RegistryFactory">
    </bean> 
    
    <bean id="user-detector" class="com.technofovea.packbsp.spring.SteamUserReader">
        <property name="appDataPath" value="${steam.app_data_vdf}"/>
    </bean>

    <!--
    State-holding beans
    -->
    
    <!-- Steam directory being picked -->
    <bean id="steam-phase" class="com.technofovea.packbsp.spring.SteamStateImpl">
        <property name="linkedScope" ref="steam-scope"/>
    </bean>
    
    <!-- Game and profile being picked -->
    <bean id="game-phase" class="com.technofovea.packbsp.spring.GameStateImpl">
        <!-- Changes to the phase-holder will cause the linked scope to reset -->
        <property name="linkedScope" ref="game-scope"/>
    </bean>
    
    <!-- Results of profile loading -->
    <bean id="profile-phase" class="com.technofovea.packbsp.spring.ProfileStateImpl">
        <!-- Changes to the phase-holder will cause the linked scope to reset -->
        <property name="linkedScope" ref="game-scope"/>
    </bean>
 
    <!--
    Main kickoff
    -->
    
    <bean id="launcher" class="com.technofovea.packbsp.Launcher$LauncherTest">
        <property name="localizer" ref="exceptionLocalizer"/>
        <property name="steamUpdater" ref="steam-phase-updater"/>
        <property name="gameUpdater" ref="game-phase-updater"/>
        <property name="kitLoader" ref="devkit-loader"/>
        <property name="profileLoader" ref="profile-loader"/>
        <property name="profileState" ref="profile-phase"/>

    </bean>

 
    <!--
    Steam loading stage
    -->
       
    <bean id="steam-phase-updater" class="com.technofovea.packbsp.spring.SteamPhaseUpdater">
        <property name="registryFactory" ref="registry-factory"/>
        <property name="userDetector" ref="user-detector"/>
        <property name="holder" ref="steam-phase"/>
    </bean>
        
    <bean id="devkit-loader" class="com.technofovea.packbsp.spring.KitLoader">
        <property name="kitFactories">
            <list>                
                <bean class="com.technofovea.packbsp.devkits.SourceSdkFactory">
                    <property name="phaseData" ref="steam-phase"/>
                </bean>
            </list>
        </property>
    </bean>
    
    <!--
    Game/Profile choice stage 
    -->
    <bean id="game-phase-updater" class="com.technofovea.packbsp.spring.GamePhaseUpdater">
        <property name="localizer" ref="exceptionLocalizer"/>
        <property name="sourceState" ref="steam-phase"/>
        <property name="gameState" ref="game-phase"/>
        <property name="profileState" ref="profile-phase"/>
    </bean>
    
    
</beans>